# -------------------------------- Jakub Seredyñski 254598 ------------------------------------------

#List 5 (28.05.2020):
#Please write a program that asks to enter two sparse vectors, and then calculate their scalar product.
# The sparse vector in its simplest version can be stored in memory as a pair of vectors -
# - a value vector and an order vector with the same number of dimensions.
# More memory-saving solutions will be scored higher.

.data

# strings:
stringAskForDimensions: .asciiz "How many dimensions?\n"
stringAskForInputA: .asciiz "Please input coordinates of vector A\n"
stringAskForInputB: .asciiz "Please input coordinates of vector B\n"

stringVectorA: .asciiz "The scalar product of vector A = ("
stringVectorB: .asciiz ") and vector B = ("
stringCommaSpace: .asciiz ", "
stringTheResult: .asciiz ")\nis: "

.text

# $s0, $s1, $s3, $s4 store the adresses of number arrays and order arrays
# $s6 stores the dot product
# $s2, $s5, $s7 store size of the vectors

main:
	jal askForDimensions
	jal instantiateVectors
	jal askForCoordinates
	jal scalarProduct
	jal printResult
	j exit

askForDimensions:
	li $v0, 4
	la $a0, stringAskForDimensions
	syscall
	
	li $v0, 5
	syscall
	
	beqz $v0 askForDimensions	# if size is 0 ask again
	bltz $v0 askForDimensions	# if size smaller than 0 ask again
	move $s6, $v0			# else save size (number of dimensions) in $s3
	
	jr $ra
	
instantiateVectors:
	li $a0, 20		# $a0 - number to bytes to allocate
	li $v0, 9		# 9 syscall - sbrk (allocate heap memory)
	syscall
	move $s0, $v0		# save memory adress of numbers from vector A
	
	li $a0, 12		# $a0 - number to bytes to allocate
	li $v0, 9		# 9 syscall - sbrk (allocate heap memory)
	syscall
	move $s1, $v0		# save memory adress of order of vector A
	
	li $a0, 20		# $a0 - number to bytes to allocate
	li $v0, 9		# 9 syscall - sbrk (allocate heap memory)
	syscall
	move $s3, $v0		# save memory adress of numbers from vector B
	
	li $a0, 12		# $a0 - number to bytes to allocate
	li $v0, 9		# 9 syscall - sbrk (allocate heap memory)
	syscall
	move $s4, $v0		# save memory adress of order of vector B
	
	jr $ra
	
askForCoordinates:
	# vector A
	li $v0, 4
	la $a0, stringAskForInputA
	syscall
	move $t0, $s0
	add $t1, $s0, $s3
	#jalLoop:
		addiu $sp, $sp, -4	# allocating space in stack
		sw $ra, 0($sp)		# saving $ra in stack
		jal loopAddVector	# jump and link would overwrite $ra, but it's saved in stack
		lw $ra, 0($sp)		# restoring $ra from stack
		addiu $sp, $sp, 4	# freeing allocated space from stack
	
	# vector B
	li $v0, 4
	la $a0, stringAskForInputB
	syscall
	move $t0, $s1
	add $t1, $s1, $s3
	#jalLoop:
		addiu $sp, $sp, -4	# allocating space in stack
		sw $ra, 0($sp)		# saving $ra in stack
		jal loopAddVector	# jump and link would overwrite $ra, but it's saved in stack
		lw $ra, 0($sp)		# restoring $ra from stack
		addiu $sp, $sp, 4	# freeing allocated space from stack
		
	jr $ra
			
	loopAddVector:
		li $v0, 5
		syscall
		sw $v0, ($t0)			# store word in the array
		addi $t0, $t0, 4		# next index
		bne $t0, $t1, loopAddVector	# if pos < size loop
		jr $ra
	
scalarProduct:
	move $t0, $s0
	move $t1, $s1
	add $t2, $s0, $s3
	
	loopMult:
		beq $t0, $t2, break		# if pos == size break
		lw $t3, ($t0)			# load from vector A
		lw $t4, ($t1)			# load from vector B
		mult $t3, $t4			# multiply coordinates
		mflo $t3
		add $s2, $s2, $t3		# add multiplication result to the scalar result
		addi $t0, $t0, 4		# move to another position
		addi $t1, $t1, 4
		j loopMult
	break:
		jr $ra	

printResult:
	li $v0, 4
	la $a0, stringVectorA
	syscall
	move $t0, $s0
	add $t1, $s0, $s3
	
	#printLoop:
		addiu $sp, $sp, -4	# allocating space in stack
		sw $ra, 0($sp)		# saving $ra in stack
		jal loopPrintVector	# jump and link would overwrite $ra, but it's saved in stack
		lw $ra, 0($sp)		# restoring $ra from stack
		addiu $sp, $sp, 4	# freeing allocated space from stack
	
	li $v0, 4
	la $a0, stringVectorB
	syscall
	move $t0, $s1
	add $t1, $s1, $s3
	
	#printLoop:
		addiu $sp, $sp, -4	# allocating space in stack
		sw $ra, 0($sp)		# saving $ra in stack
		jal loopPrintVector	# jump and link would overwrite $ra, but it's saved in stack
		lw $ra, 0($sp)		# restoring $ra from stack
		addiu $sp, $sp, 4	# freeing allocated space from stack
		
	li $v0, 4
	la $a0, stringTheResult
	syscall
	
	li $v0, 1
	move $a0, $s2
	syscall
	
	jr $ra
	
	loopPrintVector:
		lw $a0, ($t0)
		addi $t0, $t0, 4
		li $v0, 1
		syscall
		bne $t0, $t1, printComma	# if it is the last pos in the array, don't print the comma
		jr $ra
		printComma:
			li $v0, 4
			la $a0, stringCommaSpace
			syscall
			j loopPrintVector
			
exit:
	li $v0, 10
	syscall