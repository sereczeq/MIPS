.data
firstInput: .asciiz "the provided string: "
secondInput: .asciiz "the encrypted string: "
buffer: .space 5
buffer1: .space 5
failed: .asciiz "the operation failed" 
succeeded: .asciiz "the operation succeeded" 
noShift: .asciiz "Nomber of shifts: "
jump: .asciiz "\n"
.text 
storing: 
    addi $t3, $zero, 0  #key
prompt: 
    #load inputs 
    #provided 
    la $s2, buffer
    move $t0, $s2
    jal getInputString 
    li $t1, 0 #length
    li $v0, 4
    la $a0, jump
    syscall
    #encrypted 
    la $s3, buffer1
    move $t2, $s3
    jal getInputString1
    li $v0, 4
    la $a0, jump
    syscall
    j load 
load:
	la $s2, buffer
    lb $t4, ($s2)          # load char at index 0 from first string 
    lb $t6, ($s3)          # load char at index 0 from second string 
compStrigs: 
    bne $t4, $t6, decrypt    #if the 2 chars from the 2 strings are not equal then decrypt 
    beq $t4, $t6, moveNext  # if the 2 strings are equal move to the next char
moveNext:
    addi $s2, $s2, 1     # move to the next char 
    addi $s3, $s3, 1      # move to the next char
    j compNewString 
compNewString:
    lb $t4, ($s2)          # load char at index 0 from first string 
    beq $t4,10, printResult 
    add $t4, $t4, $t8
    lb $t6, ($s3)          # load char at index 0 from second string 
    bne $t4, $t6, couldnot    #if the 2 chars from the 2 strings are not equal then decrypt 
   
    beq $t4, $t6, moveNext  # if the 2 strings are equal move to the next char
add1:
	addi $t8, $t8, -1
	addi $t4, $t4, -1
	j compStrigs   

decryption: 
     addi $t3, $t3, 1
     jal decrypt
    decrypt:
         lb $t5, 0($s2)
         beq $t5,10,load
         beqz $t5,load
         jal decryptForLowerCase
    conDecryption:
         beq $v0,1,dLowerCase
         beq $v0,0,dUpper
         move $a0, $t5
    printDecryption:
    sb $a0, ($s2)
         li $v0,11
         syscall
         add $s2,$s2,1
         add $t1,$t1,1
         j decrypt
	decryptForLowerCase:
 		bgt $t5,122,dNeither 	
 		blt $t5,97,dUpperCase	
 		li $v0,1    				
 		jr $ra
	dNeither:
	#HUUUGE PENIS HEHE
 		li $v0,2   				
 		j conDecryption
	dUpperCase:
		blt $t5,65,dNeither 		
 		bgt $t5,91,dNeither		
 		li $v0,0   	
 		j conDecryption
	dLowerCase:
 		li $t7,26   		
 		sub $t5,$t5,97
 		sub $t5, $t5, $t3
 		sub $t8,$zero,$t5
 		li $t9,1
 	modNegative:
 		mul $s0,$t7,$t9
 		bgt $s0,$t8,modUp
 		addi $t9,$t9,1
 		j modNegative
 	modUp:
 		add $t5,$s0,$t5
 		div $t5,$t7
 		mfhi $a0
 		addi $a0,$a0,97
 		j printDecryption
 	dUpper:
 		li $t7,26   				
 		sub $t5,$t5,65
 		sub $t5, $t5, $t3
 		sub $t8,$zero,$t5
 		li $t9,1
 	modForNeUp:
 		mul $s0,$t7,$t9
 		bgt $s0,$t8,modCalUpper
 		addi $t9,$t9,1
 		j modForNeUp
 	modCalUpper:
 		add $t5,$s0,$t5
 		div $t5,$t7
 		mfhi $a0
 		addi $a0,$a0,65
 		j printDecryption
 printResult: 
	li $v0, 4
	la $a0, succeeded
	syscall 
	li $v0, 4  
	la $a0, jump
	syscall
	li $v0, 4
	la $a0, noShift
	syscall
	move $a0, $t8 #was $t3
	li $v0, 1 
	syscall
	j exit
couldnot: 
	li $v0, 4
	la $a0, failed
	syscall 
	j exit
getInputString: 
	li $v0, 4
	la $a0, firstInput
	syscall 
	move $a0, $t0
	li $a1, 5
	li $v0, 8 
	syscall
	jr $ra
getInputString1: 
	li $v0, 4
	la $a0, secondInput
	syscall 
	move $a0, $t2
	li $a1, 5
	li $v0, 8 
	syscall
	jr $ra
exit:
	li $v0, 10 
	syscall
